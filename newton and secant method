#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#define TOL 0.0001
void newton(void);
void secant(void);
float f(float x);
float ff(float x);
int main()
{
	printf("\n The Newton method ................\n");
	newton();
	printf("\n The secant method ................\n");
	secant();

	return 0;
}
void newton(void)
{
	float p,p0=2;
	int i=0,N;
	printf("\nEnter the number of iteration : \n");
	scanf("%d",&N);
	while(i<N)
	{
		p=p0-(f(p0)/ff(p0));
		if(fabs(p-p0)<TOL)
		{
			printf("\n The procedure was successful p= %f \n",p);
			break;
		}
		i++;
		printf("\n %d . The iteration p= %f \n",i,p);
		p0=p;
	}
	if(i>N)
	printf("\n The method failed after N iteration .\n");

}
float f(float x)
{
	return (x*x*x-2*x*x-5);
}
float ff(float x)
{
	return (3*x*x-4*x);
}
void secant(void)
{
 	int i=4,N=500;
	float p0,p1,p,q0,q1;
	p0=5,p1=7;
	printf("\n1 initial root %f \n",p0);
	printf("\n2 initial root %f \n",p1);
	while(i<N)
	{
		q0=f(p0);
		q1=f(p1);
		p=p1-(q1*(p1-p0))/(q1-q0);
		printf("\n %d iteration    %f \n",i,p);
		if(fabs(p-p1)<TOL)
		{
			printf("\n The procedure was successful %f \n",p);
			break;
		}
		i++;
		p0=p1;
		q0=q1;
		p1=p;
		q1=f(p);
	
		
		
	}
	if(i>N)
	{
		printf("\n The method failed after N iteration \n");
	}
}
